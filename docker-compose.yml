version: "3.8"
volumes:
  mysqldata:
  ollama_data: # Volume pour Ollama
  openwebui_data: # Volume pour Open WebUI

networks:
  default:
    driver: bridge

services:
  phpfpm:
    build:
      context: Docker/php-fpm
    container_name: php-fpm
    environment:
      TERM: xterm-color
      DATABASE_DSN: mysql:dbname=myhelpdesk;host=mysql
      DATABASE_USER: user
      DATABASE_PASSWORD: password
      MISTRAL_API_KEY: ${MISTRAL_API_KEY:-}
    cap_add:
      - SYS_PTRACE
    volumes:
      - type: "bind"
        source: "./app/"
        target: "/project"
      - type: "bind"
        source: "../"
        target: "/workspace"
    networks:
      - default
#    depends_on:
#      - ollama

  nginx:
    build:
      context: Docker/nginx
    container_name: nginx
    ports:
      - 8084:80
    environment:
      TERM: xterm-color
      VIRTUAL_PORT: 8080
      VIRTUAL_HOST: "my-app.local"
    cap_add:
      - SYS_PTRACE
    volumes:
      - type: bind
        source: "./app/"
        target: "/project"
      - type: bind
        source: "../"
        target: "/workspace"
      - type: bind
        source: "./docker/nginx/nginx.conf"
        target: "/etc/nginx/nginx.conf"
      - type: bind
        source: "./docker/nginx/phpfpm.conf"
        target: "/etc/nginx/conf.d/phpfpm.conf"
      - type: bind
        source: "./docker/nginx/default.conf"
        target: "/etc/nginx/conf.d/default.conf"
    depends_on:
      - phpfpm
    networks:
      - default

  mysql:
    container_name: database
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: myhelpdesk
      MYSQL_HOST: database
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - '3308:3306'
    volumes:
      - ./mysqldata:/var/lib/mysql
    networks:
      - default

  phpmyadmin:
    image: phpmyadmin
    ports:
      - '8094:80'
    environment:
      PMA_ARBITRARY: 0
      PMA_HOST: database
      PMA_USER: 'root'
      PMA_PASSWORD: 'password'
    networks:
      - default

##OPTION 2 : openwebui +ollama dans la même image. Toujours lent
#  openwebui:
#    image: ghcr.io/open-webui/open-webui:ollama
#    container_name: openwebui
#    ports:
#      - "3000:8080"  # Port pour accéder à Open WebUI
#    environment:
#      WEBUI_AUTH: False
#    volumes:
#      - openwebui_data:/app/backend/data  # Volume pour persister les données Open WebUI
#    networks:
#      - default
#    restart: always
#    deploy:
#      resources:
#        limits:
#          memory: 8G  #


#OPTION 1 : openwebui et ollama dans deux images séparés. Fonctionnel, mais beaucoup trop lent

  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "11434:11434" # Port pour accéder à l'API Ollama
    volumes:
      - ollama_data:/root/.ollama # Volume pour les modèles et données persistantes
    networks:
      - default
    command: ""

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    ports:
      - "3000:8080" # Port pour accéder à Open WebUI
    environment:
      WEBUI_AUTH: False
      OLLAMA_BASE_URL: http://ollama:11434 # Indique à Open WebUI l'URL de l'API Ollama
    volumes:
      - openwebui_data:/app/backend/data # Volume pour persister les données Open WebUI
    networks:
      - default
    depends_on:
      - ollama


##OPTION 3 : utiliser OPENAI, mais c'est payant
#  openwebui:
#    image: ghcr.io/open-webui/open-webui:main  # Image compatible avec OpenAI
#    container_name: openwebui
#    ports:
#      - "3000:8080"  # Port pour accéder à Open WebUI
#    environment:
#      OPENAI_API_KEY: OPENAI_API_KEY
#      WEBUI_AUTH: False  # Désactive l'authentification
#    volumes:
#      - openwebui_data:/app/backend/data  # Volume pour persister les données Open WebUI
#    networks:
#      - default
#    restart: always
